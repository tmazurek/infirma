<div class="dashboard-greeting">
  <div class="greeting-text">
    <h1>Utwórz nową fakturę</h1>
  </div>
  <div class="action-buttons">
    <a href="/invoices" class="action-button">
      <i class="fas fa-arrow-left"></i> Powrót do listy faktur
    </a>
  </div>
</div>

<div id="message-container" class="mb-3" style="display: none;"></div>

<div class="card">
  <div class="card-header">
    <h2>Dane faktury</h2>
  </div>
  <div class="card-body">
    <form id="invoice-form">
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="invoice-number">Numer faktury</label>
          <input type="text" id="invoice-number" name="invoice_number" readonly>
          <small class="text-muted">Numer zostanie wygenerowany automatycznie</small>
        </div>
        <div class="form-group col-md-6">
          <label for="issue-date">Data wystawienia</label>
          <input type="date" id="issue-date" name="issue_date" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="due-date">Termin płatności</label>
          <input type="date" id="due-date" name="due_date">
        </div>
        <div class="form-group col-md-6">
          <label for="payment-method">Metoda płatności</label>
          <select id="payment-method" name="payment_method">
            <option value="transfer">Przelew bankowy</option>
            <option value="cash">Gotówka</option>
            <option value="card">Karta płatnicza</option>
          </select>
        </div>
      </div>
      
      <div class="form-group">
        <label for="client-id">Klient</label>
        <select id="client-id" name="client_id" required>
          <option value="">Wybierz klienta</option>
          <!-- Client options will be loaded dynamically -->
        </select>
      </div>
      
      <h3 class="mt-4">Pozycje faktury</h3>
      
      <div id="invoice-items">
        <!-- Invoice items will be added here -->
        <div class="invoice-item">
          <div class="form-row">
            <div class="form-group col-md-6">
              <label>Opis</label>
              <input type="text" name="items[0][description]" class="form-control item-description" required>
            </div>
            <div class="form-group col-md-2">
              <label>Ilość</label>
              <input type="number" name="items[0][quantity]" class="form-control item-quantity" value="1" min="1" step="1" required>
            </div>
            <div class="form-group col-md-2">
              <label>Cena netto</label>
              <input type="number" name="items[0][unit_price_net]" class="form-control item-price" value="0.00" min="0" step="0.01" required>
            </div>
            <div class="form-group col-md-2">
              <label>VAT (%)</label>
              <select name="items[0][vat_rate]" class="form-control item-vat">
                <option value="23">23%</option>
                <option value="8">8%</option>
                <option value="5">5%</option>
                <option value="0">0%</option>
                <option value="-1">Zwolniony</option>
              </select>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-4">
              <label>Wartość netto</label>
              <input type="text" class="form-control item-total-net" readonly>
            </div>
            <div class="form-group col-md-4">
              <label>Kwota VAT</label>
              <input type="text" class="form-control item-total-vat" readonly>
            </div>
            <div class="form-group col-md-4">
              <label>Wartość brutto</label>
              <input type="text" class="form-control item-total-gross" readonly>
            </div>
          </div>
          <button type="button" class="btn btn-sm btn-outline remove-item" style="display: none;">
            <i class="fas fa-trash"></i> Usuń pozycję
          </button>
          <hr>
        </div>
      </div>
      
      <button type="button" id="add-item" class="btn btn-outline">
        <i class="fas fa-plus"></i> Dodaj pozycję
      </button>
      
      <div class="invoice-summary mt-4">
        <div class="row">
          <div class="col-md-6 offset-md-6">
            <table class="table">
              <tr>
                <td>Suma netto:</td>
                <td id="total-net" class="text-right">0.00 PLN</td>
              </tr>
              <tr>
                <td>Suma VAT:</td>
                <td id="total-vat" class="text-right">0.00 PLN</td>
              </tr>
              <tr class="font-weight-bold">
                <td>Suma brutto:</td>
                <td id="total-gross" class="text-right">0.00 PLN</td>
              </tr>
            </table>
          </div>
        </div>
      </div>
      
      <div class="form-group mt-4">
        <label for="notes">Uwagi</label>
        <textarea id="notes" name="notes" class="form-control" rows="3"></textarea>
      </div>
      
      <div class="form-actions mt-4">
        <button type="submit" class="btn btn-primary">Zapisz fakturę</button>
        <button type="button" id="save-draft" class="btn btn-outline">Zapisz jako szkic</button>
      </div>
    </form>
  </div>
</div>

<style>
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
  }
  .col-md-2, .col-md-4, .col-md-6 {
    position: relative;
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
  }
  @media (min-width: 768px) {
    .col-md-2 {
      flex: 0 0 16.666667%;
      max-width: 16.666667%;
    }
    .col-md-4 {
      flex: 0 0 33.333333%;
      max-width: 33.333333%;
    }
    .col-md-6 {
      flex: 0 0 50%;
      max-width: 50%;
    }
    .offset-md-6 {
      margin-left: 50%;
    }
  }
  .invoice-item {
    margin-bottom: 20px;
    padding-bottom: 10px;
  }
  .invoice-summary {
    background-color: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
  }
  .text-right {
    text-align: right;
  }
  .font-weight-bold {
    font-weight: bold;
  }
  .table {
    width: 100%;
    margin-bottom: 1rem;
    color: #212529;
  }
  .table td {
    padding: 0.75rem;
    vertical-align: top;
    border-top: 1px solid #dee2e6;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Set default issue date to today
    document.getElementById('issue-date').valueAsDate = new Date();
    
    // Set default due date to 14 days from today
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 14);
    document.getElementById('due-date').valueAsDate = dueDate;
    
    // Load clients
    loadClients();
    
    // Generate invoice number
    generateInvoiceNumber();
    
    // Add event listeners
    document.getElementById('add-item').addEventListener('click', addInvoiceItem);
    document.getElementById('invoice-form').addEventListener('submit', saveInvoice);
    document.getElementById('save-draft').addEventListener('click', saveDraft);
    
    // Add event listeners to first item
    setupItemListeners(document.querySelector('.invoice-item'));
    
    // Calculate totals
    calculateTotals();
    
    // Functions
    function loadClients() {
      fetch('/api/clients')
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to fetch clients');
          }
          return response.json();
        })
        .then(clients => {
          const clientSelect = document.getElementById('client-id');
          
          clients.forEach(client => {
            const option = document.createElement('option');
            option.value = client.id;
            option.textContent = client.name;
            clientSelect.appendChild(option);
          });
        })
        .catch(error => {
          showMessage('error', 'Error loading clients: ' + error.message);
        });
    }
    
    function generateInvoiceNumber() {
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      
      fetch('/api/invoices/next-number')
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to generate invoice number');
          }
          return response.json();
        })
        .then(data => {
          document.getElementById('invoice-number').value = data.next_number || `FV/${year}/${month}/001`;
        })
        .catch(error => {
          // Use a default format if API fails
          document.getElementById('invoice-number').value = `FV/${year}/${month}/001`;
        });
    }
    
    function addInvoiceItem() {
      const itemsContainer = document.getElementById('invoice-items');
      const items = itemsContainer.querySelectorAll('.invoice-item');
      const newIndex = items.length;
      
      // Clone the first item
      const newItem = items[0].cloneNode(true);
      
      // Update input names and clear values
      newItem.querySelectorAll('input, select').forEach(input => {
        if (input.name) {
          input.name = input.name.replace(/\[\d+\]/, `[${newIndex}]`);
        }
        if (!input.classList.contains('item-vat') && !input.readOnly) {
          input.value = input.type === 'number' ? (input.min || '0') : '';
        }
      });
      
      // Show remove button
      newItem.querySelector('.remove-item').style.display = 'inline-block';
      
      // Add event listener to remove button
      newItem.querySelector('.remove-item').addEventListener('click', function() {
        newItem.remove();
        calculateTotals();
        updateItemIndexes();
      });
      
      // Add event listeners to inputs
      setupItemListeners(newItem);
      
      // Append new item
      itemsContainer.appendChild(newItem);
      
      // Focus on description field
      newItem.querySelector('.item-description').focus();
    }
    
    function setupItemListeners(item) {
      const quantityInput = item.querySelector('.item-quantity');
      const priceInput = item.querySelector('.item-price');
      const vatSelect = item.querySelector('.item-vat');
      
      quantityInput.addEventListener('input', function() {
        calculateItemTotals(item);
        calculateTotals();
      });
      
      priceInput.addEventListener('input', function() {
        calculateItemTotals(item);
        calculateTotals();
      });
      
      vatSelect.addEventListener('change', function() {
        calculateItemTotals(item);
        calculateTotals();
      });
    }
    
    function calculateItemTotals(item) {
      const quantity = parseFloat(item.querySelector('.item-quantity').value) || 0;
      const unitPrice = parseFloat(item.querySelector('.item-price').value) || 0;
      const vatRate = parseFloat(item.querySelector('.item-vat').value);
      
      const totalNet = quantity * unitPrice;
      let totalVat = 0;
      
      if (vatRate >= 0) {
        totalVat = totalNet * (vatRate / 100);
      }
      
      const totalGross = totalNet + totalVat;
      
      item.querySelector('.item-total-net').value = totalNet.toFixed(2) + ' PLN';
      item.querySelector('.item-total-vat').value = totalVat.toFixed(2) + ' PLN';
      item.querySelector('.item-total-gross').value = totalGross.toFixed(2) + ' PLN';
    }
    
    function calculateTotals() {
      const items = document.querySelectorAll('.invoice-item');
      let totalNet = 0;
      let totalVat = 0;
      let totalGross = 0;
      
      items.forEach(item => {
        const quantity = parseFloat(item.querySelector('.item-quantity').value) || 0;
        const unitPrice = parseFloat(item.querySelector('.item-price').value) || 0;
        const vatRate = parseFloat(item.querySelector('.item-vat').value);
        
        const itemTotalNet = quantity * unitPrice;
        let itemTotalVat = 0;
        
        if (vatRate >= 0) {
          itemTotalVat = itemTotalNet * (vatRate / 100);
        }
        
        const itemTotalGross = itemTotalNet + itemTotalVat;
        
        totalNet += itemTotalNet;
        totalVat += itemTotalVat;
        totalGross += itemTotalGross;
      });
      
      document.getElementById('total-net').textContent = totalNet.toFixed(2) + ' PLN';
      document.getElementById('total-vat').textContent = totalVat.toFixed(2) + ' PLN';
      document.getElementById('total-gross').textContent = totalGross.toFixed(2) + ' PLN';
    }
    
    function updateItemIndexes() {
      const items = document.querySelectorAll('.invoice-item');
      
      items.forEach((item, index) => {
        item.querySelectorAll('input, select').forEach(input => {
          if (input.name) {
            input.name = input.name.replace(/\[\d+\]/, `[${index}]`);
          }
        });
      });
    }
    
    function saveInvoice(e) {
      e.preventDefault();
      saveInvoiceData('Issued');
    }
    
    function saveDraft() {
      saveInvoiceData('Draft');
    }
    
    function saveInvoiceData(status) {
      const form = document.getElementById('invoice-form');
      const formData = new FormData(form);
      const invoiceData = {
        invoice_number: formData.get('invoice_number'),
        client_id: formData.get('client_id'),
        issue_date: formData.get('issue_date'),
        due_date: formData.get('due_date'),
        payment_method: formData.get('payment_method'),
        notes: formData.get('notes'),
        status: status,
        items: []
      };
      
      // Get all invoice items
      const items = document.querySelectorAll('.invoice-item');
      
      items.forEach((item, index) => {
        const description = formData.get(`items[${index}][description]`);
        const quantity = parseFloat(formData.get(`items[${index}][quantity]`));
        const unitPriceNet = parseFloat(formData.get(`items[${index}][unit_price_net]`));
        const vatRate = parseFloat(formData.get(`items[${index}][vat_rate]`));
        
        // Calculate totals
        const itemTotalNet = quantity * unitPriceNet;
        let itemTotalVat = 0;
        
        if (vatRate >= 0) {
          itemTotalVat = itemTotalNet * (vatRate / 100);
        }
        
        const itemTotalGross = itemTotalNet + itemTotalVat;
        
        invoiceData.items.push({
          description: description,
          quantity: quantity,
          unit_price_net: unitPriceNet,
          vat_rate: vatRate,
          item_total_net: itemTotalNet,
          item_total_vat: itemTotalVat,
          item_total_gross: itemTotalGross
        });
      });
      
      // Calculate invoice totals
      let totalNet = 0;
      let totalVat = 0;
      let totalGross = 0;
      
      invoiceData.items.forEach(item => {
        totalNet += item.item_total_net;
        totalVat += item.item_total_vat;
        totalGross += item.item_total_gross;
      });
      
      invoiceData.total_net = totalNet;
      invoiceData.total_vat = totalVat;
      invoiceData.total_gross = totalGross;
      
      // Send data to server
      fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(invoiceData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to save invoice');
        }
        return response.json();
      })
      .then(data => {
        showMessage('success', `Invoice ${status === 'Draft' ? 'draft' : ''} saved successfully!`);
        
        // Redirect to invoice list after a short delay
        setTimeout(() => {
          window.location.href = '/invoices';
        }, 1500);
      })
      .catch(error => {
        showMessage('error', 'Error: ' + error.message);
      });
    }
    
    function showMessage(type, message) {
      const messageContainer = document.getElementById('message-container');
      
      messageContainer.innerHTML = `
        <div class="card mb-3">
          <div class="card-body ${type === 'error' ? 'text-warning' : 'text-success'}">
            <i class="fas ${type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle'}"></i> ${message}
          </div>
        </div>
      `;
      
      messageContainer.style.display = 'block';
      
      // Auto-hide message after 5 seconds
      setTimeout(() => {
        messageContainer.style.display = 'none';
      }, 5000);
    }
  });
</script>
